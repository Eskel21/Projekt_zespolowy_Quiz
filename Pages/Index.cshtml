@page

@model IndexModel
@{
    ViewData["Title"] = "Home page";
}
<form method="post">
    <div class="form-group">
        <label for="SelectedCategory">Category:</label>
        <select class="form-control" id="category" asp-for="SelectedCategory">
            <option value="">Choose category</option>
            <option value="linux">Linux</option>
            <option value="bash">Bash</option>
            <option value="uncategorized">Uncategorized</option>
            <option value="docker">Docker</option>
            <option value="sql">SQL</option>
            <option value="cms">CMS</option>
            <option value="code">Code</option>
            <option value="devops">DevOps</option>
        </select>
    </div>
    <div class="form-group">
        <label for="SelectedDifficulty">Difficulty:</label>
        <select class="form-control" id="difficulty" asp-for="SelectedDifficulty">
            <option value="">Choose difficulty</option>
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
        </select>
    </div>

    <div class="form-group">
        <label for="SelectedLimit">Number of questions:</label>
        <select class="form-control" id="limit" asp-for="SelectedLimit">
            <option value="">20</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
            <option value="6">6</option>
            <option value="7">7</option>
            <option value="8">8</option>
            <option value="9">9</option>
            <option value="10">10</option>
            <option value="11">11</option>
            <option value="12">12</option>
            <option value="13">13</option>
            <option value="14">14</option>
            <option value="15">15</option>
            <option value="16">16</option>
            <option value="17">17</option>
            <option value="18">18</option>
            <option value="19">19</option>
            <option value="20">20</option>

        </select>
    </div>
    <h2>
        <button type="submit">
            Start Quiz
            <img class="show-button-icon" src="~/right-arrow.png" />
        </button>
    </h2>
</form>

<div class="text-center">
    <h1 class="display-4">Quiz Questions</h1>
    @if (Model.Questions != null)
    {
       
        <div id="questionInfoContainer">
        </div>
        <div id="questionsContainer">
                       
        </div>
        <div id="countdownContainer">

        </div>
      
    }
    else
    {
        <p class="text-center">No questions found.</p>
    }
</div>
<script>
    // Tablica z pytaniami
    var questions = @Html.Raw(Json.Serialize(Model.Questions));

    // Pobierz referencje do elementów DOM
    var questionsContainer = document.getElementById("questionsContainer");
    var countdownContainer = document.getElementById("countdownContainer");
    var questionInfoContainer = document.getElementById("questionInfoContainer");
    var testContainer = document.getElementById("testContainer");
    

    // Zmienne do przechowywania aktualnego indeksu pytania i liczby poprawnych odpowiedzi
    var currentQuestionIndex = 0;
    var correctAnswersCount = 0;

    var countdownTime = 20; // Czas w sekundach
    var countdownInterval; // Zmienna przechowująca identyfikator interwału
    var countdownActive = false; // Zmienna informująca, czy odliczanie jest aktywne
    

    // Funkcja do wyświetlania pytania
    function displayNextQuestion() {
        // Wyczyść zawartość kontenerów przed dodaniem nowych danych
        questionsContainer.innerHTML = "";
        countdownContainer.innerHTML = "";

        if (countdownActive) {
            // Jeśli odliczanie jest aktywne, zatrzymaj je
            clearInterval(countdownInterval);
            countdownActive = false;
        }

        if (currentQuestionIndex < questions.length) {
            var currentQuestion = questions[currentQuestionIndex];

            // Dodaj informację o bieżącym pytaniu
            questionInfoContainer.innerHTML = "Pytanie " + (currentQuestionIndex + 1) + "/" + questions.length;

            // Dodaj treść pytania
            questionsContainer.innerHTML += "<p>" + currentQuestion.question + "</p>";
           
            // Dodaj przyciski dla odpowiedzi w oddzielnych divach
            for (var key in currentQuestion.answers) {
                if (currentQuestion.answers.hasOwnProperty(key) && currentQuestion.answers[key] !== null) {
                    var answerDiv = document.createElement("div");
                    var button = document.createElement("button");
                    
                    button.innerHTML = key.slice(-1) + ". " + currentQuestion.answers[key];
                    button.addEventListener("click", function (event) {
                        // Funkcja obsługująca kliknięcie w odpowiedź
                        var selectedKey = event.target.innerHTML.split(".")[0];
                        checkAnswer(selectedKey, currentQuestion);
                        console.log(selectedKey);
                        displayNextQuestion();
                    });
                    answerDiv.appendChild(button);
                    questionsContainer.appendChild(answerDiv);
                }
            }
            

           
            // Uruchom odliczanie
            startCountdown();

            currentQuestionIndex++;
        } else {
            questionInfoContainer.innerHTML = ""; // Wyczyść informację o pytaniu
            displayResults();
            // Opcjonalnie możesz dodać obsługę zakończenia quizu
        }
    }
    function checkAnswer(selectedKey, currentQuestion){
        var s = currentQuestion.correct_Answers;
        if (s["answer_" + selectedKey + "_Correct"]) {
            correctAnswersCount++;
        }
        //console.log(s);
        
       

    }
   

    // Funkcja do uruchamiania odliczania
    function startCountdown() {
        countdownTime = 20; // Zresetuj czas odliczania
        countdownActive = true; // Ustaw flagę aktywności odliczania

        countdownInterval = setInterval(function () {
            countdownContainer.innerHTML = "Czas do następnego pytania: " + countdownTime + "s";

            if (countdownTime <= 0) {
                clearInterval(countdownInterval);
                countdownActive = false; // Zresetuj flagę aktywności odliczania
                displayNextQuestion();
            }

            countdownTime--;
        }, 1000);
    }

    

    // Funkcja do wyświetlania wyników
    function displayResults() {
        questionsContainer.innerHTML = "Wynik: " + correctAnswersCount+"/"+questions.length;
    }

    // Wywołaj funkcję, aby wyświetlić pierwsze pytanie
    displayNextQuestion();
</script>















